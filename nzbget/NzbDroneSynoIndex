#!/usr/bin/env python

##############################################################################
### NZBGET POST-PROCESSING SCRIPT                                          ###

# Calls synoindex after a successful NzbDrone rename.

##############################################################################
### OPTIONS                                                                ###

# Full URL to NzbDrone.
#url=http://localhost:8989

# NzbDrone API key.
#apikey=

# Seconds to wait for Completed Download Handling to complete.
#delay=120

### NZBGET POST-PROCESSING SCRIPT                                          ###
##############################################################################

# INSTALLATION INSTRUCTIONS:
#
#  1. Place script in ppscripts directory,
#       e.g. /usr/local/ppscripts/NzbDroneSynoIndex
#
#  2. Make script executable:
#       chmod a+x /usr/local/ppscripts/NzbDroneSynoIndex
#
#  3. Restart NZBGet
#
#  4. NZBGet Settings > NzbDroneSynoIndex: set url, apikey and optionally delay
#
#  5. NZBGet Settings > Extension Scripts: move NzbDroneSynoIndex after nzbToNzbDrone.py,
#       e.g. DeleteSamples.py, nzbToNzbDrone.py, NzbDroneSynoIndex
#
#  6. NZBGet Settings > Categories: set NzbDroneSynoIndex as DefScript for tv category,
#       e.g. nzbToMedia/nzbToNzbDrone.py, NzbDroneSynoIndex
#

import json
import subprocess
import urllib
import urllib2
import os
import sys
import time

try:
  status = os.environ['NZBPP_TOTALSTATUS']
except:
  status = 'SUCCESS'

if status != 'SUCCESS':
  sys.exit(95)

url = os.environ['NZBPO_URL']
apikey = os.environ['NZBPO_APIKEY']
delay = os.environ['NZBPO_DELAY']

synoindex = '/usr/syno/bin/synoindex'
config_endpoint = '/api/config/downloadClient'
history_endpoint = '/api/history'

def send_request(endpoint, params = None):
  global url, apikey
  query = url + endpoint
  if params:
    query = query + '?' + params
    
  request = urllib2.Request(query)
  request.add_header("X-Api-Key", apikey)
  response = urllib2.urlopen(request)
  data = json.loads(response.read())
  return data

data = send_request(config_endpoint)
try:
  if data["enableCompletedDownloadHandling"]:
    print "[INFO] Completed Download Handling enabled. Waiting " + delay + " seconds for CDH to complete."
    time.sleep(float(delay))
except: pass

params = urllib.urlencode({'sortKey': 'date', 'page': 1, 'pageSize': 1, 'sortDir': 'desc'})
data = send_request(history_endpoint, params)
result = 0

try:
  file_path = data["records"][0]["data"]["importedPath"]
  dirname = os.path.dirname(os.path.dirname(file_path)) # handle "abc/season x" et al
  print "[INFO] Indexing " + file_path
  result = subprocess.call([synoindex, "-A", dirname])
  result = result + subprocess.call([synoindex, "-a", file_path])
except: pass

if result == 0:
  sys.exit(93)
else:
  sys.exit(94)

